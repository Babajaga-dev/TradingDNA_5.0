# src/__init__.py
import os
from pathlib import Path
import logging
from typing import Optional, Tuple, Dict, Any
from dataclasses import dataclass

from .utils.system_utils import PathManager
from .utils.system_helper import system_helper
from .utils.config import config

logger = logging.getLogger(__name__)

@dataclass
class Environment:
    """Classe per mantenere lo stato dell'ambiente"""
    path_manager: PathManager
    system_info: Dict[str, Any]
    initialized: bool = False

def initialize_environment(base_dir: Optional[str] = None) -> Environment:
    """
    Inizializza l'ambiente di trading
    
    Args:
        base_dir: Directory base opzionale
        
    Returns:
        Environment: Oggetto contenente lo stato dell'ambiente
        
    Raises:
        RuntimeError: Se l'inizializzazione fallisce
    """
    try:
        # Inizializza gestione path
        path_manager = PathManager(base_dir)
        directories = path_manager.ensure_directories()
        
        # Imposta variabili ambiente
        os.environ['TRADING_SYSTEM_HOME'] = str(path_manager.base_dir)
        os.environ['TRADING_SYSTEM_DATA'] = str(path_manager.get_data_dir())
        os.environ['TRADING_SYSTEM_CONFIG'] = str(path_manager.get_config_dir())
        os.environ['TRADING_SYSTEM_CACHE'] = str(path_manager.get_cache_dir())
        
        # Ottieni info sistema
        system_info = system_helper.get_system_status()
        
        # Log inizializzazione
        logger.info("Trading System Environment:")
        logger.info(f"Base Directory: {path_manager.base_dir}")
        logger.info(f"Data Directory: {path_manager.get_data_dir()}")
        logger.info(f"Config Directory: {path_manager.get_config_dir()}")
        logger.info(f"Cache Directory: {path_manager.get_cache_dir()}")
        
        # Verifica disponibilità GPU
        if system_helper.cuda_available:
            logger.info("GPU support enabled")
            if not config.get("genetic.optimizer.use_gpu", False):
                logger.warning("GPU available but not enabled in config")
        
        return Environment(
            path_manager=path_manager,
            system_info=system_info,
            initialized=True
        )
        
    except Exception as e:
        logger.error(f"Error initializing environment: {str(e)}")
        raise RuntimeError(f"Failed to initialize environment: {str(e)}")

def get_project_root() -> Path:
    """
    Restituisce il percorso root del progetto
    
    Returns:
        Path: Percorso assoluto della root del progetto
        
    Raises:
        RuntimeError: Se il percorso non può essere determinato
    """
    try:
        return Path(__file__).parent.parent.resolve()
    except Exception as e:
        logger.error(f"Error determining project root: {str(e)}")
        raise RuntimeError(f"Failed to determine project root: {str(e)}")

# Variabile globale per l'ambiente
# Non inizializzare automaticamente, lascia che sia il codice client a farlo
environment: Optional[Environment] = None

def get_environment() -> Environment:
    """
    Ottiene l'ambiente corrente, inizializzandolo se necessario
    
    Returns:
        Environment: Oggetto ambiente inizializzato
        
    Raises:
        RuntimeError: Se l'ambiente non può essere inizializzato
    """
    global environment
    if environment is None or not environment.initialized:
        environment = initialize_environment()
    return environment
